                              Factorial

fact=function(n)
{
if(n==0)
{
return(1)
}
else
{
return(n*fact(n-1))
}
}
n=3
fact(n)

                             Fibo

fibo=functon(n)
{
if(n<=1)
{
return(1)
}
else
{
return(fibo(n-1)+fibo(n-2))
}
}
for(i in 0:(n-1))
{
print(fibo(i))
}

                             SUM

sum=function(n)
{
if(n==0)
{
return(0)
}
else
{
return(n+sum(n))
}
}
n=3
function(n)

                             Pascal Tri

pascal_triangle=function(h)
{
for(i in 0:(h-1))
{
s=" "
for(k in 0:(h-i))
{
s=paste(s," ",sep=" ")
}
for(j in 0:i)
{
s=paste(s,sprintf("%3d",choose(i,j)),sep=" ")
}
print(s)
}
}
pascal_triangle(5)

                           Euclideon

euclideon=function(x,y)
{
if((x%%y)==0)
{
return(y)
}
else
{
return(euclideon(y,(x%%y)))
}
}
euclideon(12,8)

                         Euclideon(Iteration)

euclideon=function(x,y)
{
while(y!=0)
{
r=x%%y
x=y
y=r
}
print(x)
}
euclideon(12,8)

                       Mergesort

mergesort=function(m)
{
merge=function(left,right)
{
result=c()
while(length(left)>0&&length(right)>0)
{
if(left[1]<=right[1])
{
result=c(result,left[1])
left=left[-1]
}
else
{
result=c(result,right[1])
right=right[-1]
}
}
if(length(left)>0)
{
result=c(result,left)
}
if(length(right)>0)
{
result=c(result,right)
}
result
}
len=length(m)
if(len<=1)
{
m
}
else
{
middle=length(m)/2
left=m[1:floor(middle)]
right=m[floor(middle+1):len]
left=mergesort(left)
right=mergesort(right)
if(left[length(left)]<=right[1])
{
c(left,right)
}
else
{
merge(left,right)
}
}
}
mergesort(c(1,4,8,5,6))

                               Prins

m=matrix(c(0,3,1,6,0,0,
           3,0,5,0,3,0,
           1,5,0,5,6,4,
           6,0,5,0,0,2,
           0,3,6,0,0,6,
           0,0,4,2,6,0),
           nrow=6,byrow=TRUE)
print(m)
n=nrow(m)
visited=matrix(c(0,0,0,0,0,0),nrow=1,byrow=TRUE)
print(visited)
min=Inf
u=0
v=0
total=0
for(i in 1:n)
{
 visited[i]=0
  for(j in 1:n)
   {
    if(m[i,j]==0)
     {  
       m[i,j]=Inf
     }
   }
}
visited[1]=1
for(counter in 0:4)
{
 min=Inf
  for(i in 1:n)
   {
    if(visited[i]==1)
     {
      for(j in 1:n)
       { 
        if(visited[j]!=1)
         {
          if(min>m[i,j])
           {
            min=m[i,j]
             u=i
             v=j
           }
         }
       }
     }
   }
 visited[v]=1
 total=total+min
 cat(sprintf("Edge found %d = %d : weight %d\n",u,v,min))
}
sprintf("The weight of MST is %d",total)

                          
                              Krushkal

m=matrix(c(0,3,1,6,0,0,
           3,0,5,0,3,0,
           1,5,0,5,6,4,
           6,0,5,0,0,2,
           0,3,6,0,0,6,
           0,0,4,2,6,0),
           nrow=6,byrow=TRUE)
print(m)
n=nrow(m)
parent=matrix(c(0,0,0,0,0,0),nrow=1,byrow=TRUE)
print(parent)
u=0
v=0
no_ofedges=1
total=0
min=0
for(i in 1:n)
{
 parent[i]=0
  for(j in 1:n)
   {
    if(m[i,j]==0)
     {
      m[i,j]=Inf
     }
   }
}
print(parent)
while(no_ofedges<n)
{
 min=Inf
 for(i in 1:n)
 { 
  for(j in 1:n)
  {
   if(m[i,j]<min)
   { 
    min=m[i,j]
    u=i
    v=j
   }
  }
 }
 if(u!=v)
 {
  parent[v]=u
  no_ofedges=no_ofedges+1
  total=total+min
  cat(sprintf("Edge found : %d = %d weight %d\n",u,v,min))
 }
m[u,v]=m[v,u]=Inf
}
sprintf("The weight of MST is : %d",total)

                             
                       Dijkstra's

cost=matrix(c(0,4,0,8,0,
              4,0,3,0,0,
              0,3,0,4,0,
              8,0,4,0,7,
              0,0,0,7,0),
           nrow=5,byrow=TRUE)
n=nrow(cost)
v=4
p=2
index=1
distance=numeric(n)
path=matrix(c(1,2,3,4,0,1,4,0,0,0),nrow=2,byrow=TRUE)
for(i in 1:n)
{
 distance[i]=0
 row=1
 for(j in 1:n-1)
 {
  if(row!=v)
  {
   column=path[i,j+1]
   distance[i]=distance[i]+cost[row,column]
  }
  row=column
 }
}
min=distance[1]
for(i in 1:p)
{
 if(distance[i]<=min)
 {
  min=distance[i]
  index=i
 }
}
sprintf("min distance is %d",min)
sprintf("min distance path is")
for(i in 1:n)
{
 if(path[index,i]!=0)
 { 
  cat(sprintf("--> %d",path[index,i]))
 }
}


                            